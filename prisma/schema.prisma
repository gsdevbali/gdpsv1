generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "windows"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id              Int               @id @default(autoincrement())
  code            String            @unique @db.VarChar(16)
  name            String
  accountTypeId   Int
  accountGroupId  Int
  accountGroup2Id Int
  balance1        Float             @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  AccountGroup2   AccountGroup2     @relation(fields: [accountGroup2Id], references: [id])
  AccountGroup    AccountGroup      @relation(fields: [accountGroupId], references: [id])
  AccountType     AccountType       @relation(fields: [accountTypeId], references: [id])
  JournalDetail   JournalDetail[]
  Transaction     Transaction[]
  TransactionMain TransactionMain[]
  transactionAlls  TransactionAll[]

  @@index([accountGroup2Id], map: "Account_accountGroup2Id_fkey")
  @@index([accountGroupId], map: "Account_accountGroupId_fkey")
  @@index([accountTypeId], map: "Account_accountTypeId_fkey")
}

model AccountGroup {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  flag    String
  Account Account[]
}

model AccountGroup2 {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  flag    String
  Account Account[]
}

model AccountType {
  id      Int       @id @default(autoincrement())
  flag    String
  name    String    @unique
  Account Account[]
}

model JournalDetail {
  id             Int          @id @default(autoincrement())
  journalEntryId Int
  accountId      Int
  ref            String       @default("")
  mediaPath      String       @default("")
  debit          Float        @default(0)
  credit         Float        @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  Account        Account      @relation(fields: [accountId], references: [id])
  JournalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id])

  @@index([accountId], map: "JournalDetail_accountId_fkey")
  @@index([journalEntryId], map: "JournalDetail_journalEntryId_fkey")
}

model JournalEntry {
  id            Int             @id @default(autoincrement())
  date          DateTime        @default(now())
  description   String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  JournalDetail JournalDetail[]
}

model Tag {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  flag               String
  TransactionAllTag  TransactionAllTag[]
  TransactionMainTag TransactionMainTag[]
  TransactionTag     TransactionTag[]
}

model Transaction {
  id              Int              @id @default(autoincrement())
  date            DateTime         @default(now())
  description     String
  ref             String           @default("")
  mediaPath       String           @default("")
  debit           Float            @default(0)
  credit          Float            @default(0)
  accountId       Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  transactionId   Int
  Account         Account          @relation(fields: [accountId], references: [id])
  TransactionMain TransactionMain  @relation(fields: [transactionId], references: [id])
  TransactionTag  TransactionTag[]

  @@index([accountId], map: "Transaction_accountId_fkey")
  @@index([transactionId], map: "Transaction_transactionId_fkey")
}

model TransactionAll {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  description String
  ref         String   @default("")
  mediaPath   String   @default("")
  debit       Float    @default(0)
  credit      Float    @default(0)
  accountId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  flag        String   @default("")
  account     Account  @relation(fields: [accountId], references: [id])

  @@index([accountId], map: "Transaction_accountId_fkey")
}

model TransactionAllTag {
  id               Int @id @default(autoincrement())
  transactionAllId Int
  tagId            Int
  Tag              Tag @relation(fields: [tagId], references: [id])

  @@unique([transactionAllId, tagId])
  @@index([tagId], map: "TransactionAllTag_tagId_fkey")
}

model TransactionMain {
  id                 Int                  @id @default(autoincrement())
  date               DateTime             @default(now())
  description        String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  ref                String               @default("")
  accountId          Int
  Transaction        Transaction[]
  Account            Account              @relation(fields: [accountId], references: [id])
  TransactionMainTag TransactionMainTag[]

  @@index([accountId], map: "TransactionMain_accountId_fkey")
}

model TransactionMainTag {
  id                Int             @id @default(autoincrement())
  transactionMainId Int
  tagId             Int
  Tag               Tag             @relation(fields: [tagId], references: [id])
  TransactionMain   TransactionMain @relation(fields: [transactionMainId], references: [id])

  @@unique([transactionMainId, tagId])
  @@index([tagId], map: "TransactionMainTag_tagId_fkey")
}

model TransactionTag {
  id            Int         @id @default(autoincrement())
  transactionId Int
  tagId         Int
  Tag           Tag         @relation(fields: [tagId], references: [id])
  Transaction   Transaction @relation(fields: [transactionId], references: [id])

  @@unique([transactionId, tagId])
  @@index([tagId], map: "TransactionTag_tagId_fkey")
}
